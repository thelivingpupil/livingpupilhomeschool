generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model CustomerPayment {
  id               String           @id @default(cuid())
  paymentId        String           @unique
  customerId       String           @unique
  email            String?          @unique
  subscriptionType SubscriptionType @default(FREE)
  createdAt        DateTime?        @default(now())
  deletedAt        DateTime?
  updatedAt        DateTime?        @updatedAt
  customer         User             @relation(fields: [customerId], references: [id])

  @@map("customerPayments")
}

model Domain {
  id          String    @id @default(cuid())
  workspaceId String
  addedById   String
  name        String
  createdAt   DateTime? @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime? @updatedAt
  addedBy     User      @relation(fields: [addedById], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("domains")
}

model GuardianInformation {
  id                          String        @id @default(cuid())
  userId                      String        @unique
  primaryGuardianName         String?
  primaryGuardianOccupation   String?
  primaryGuardianType         GuardianType? @default(LEGAL_GUARDIAN)
  primaryGuardianProfile      String?
  secondaryGuardianName       String?
  secondaryGuardianOccupation String?
  secondaryGuardianType       GuardianType? @default(LEGAL_GUARDIAN)
  secondaryGuardianProfile    String?
  mobileNumber                String?
  telephoneNumber             String?
  anotherEmail                String?
  address1                    String?
  address2                    String?
  createdAt                   DateTime?     @default(now())
  deletedAt                   DateTime?
  updatedAt                   DateTime?     @updatedAt
  user                        User          @relation(fields: [userId], references: [id])

  @@map("guardianInformation")
}

model Inquiry {
  id        String    @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime? @default(now())
  deletedAt DateTime?
  updatedAt DateTime? @updatedAt

  @@map("inquiry")
}

model Member {
  id          String           @id @default(cuid())
  workspaceId String
  email       String
  inviter     String
  invitedAt   DateTime?        @default(now())
  joinedAt    DateTime?
  deletedAt   DateTime?
  updatedAt   DateTime?        @updatedAt
  status      InvitationStatus @default(PENDING)
  teamRole    TeamRole         @default(MEMBER)
  member      User             @relation("membership", fields: [email], references: [email])
  invitedBy   User             @relation("inviter", fields: [inviter], references: [email])
  workspace   Workspace        @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, email])
  @@map("members")
}

model Order {
  id                String           @id @default(cuid())
  code              String
  name              String
  image             String
  basePrice         Decimal          @default(0)
  totalPrice        Decimal          @default(0)
  quantity          Int              @default(0)
  createdAt         DateTime?        @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime?        @updatedAt
  purchaseHistoryId String?
  remarks           String?
  purchaseHistory   PurchaseHistory? @relation(fields: [purchaseHistoryId], references: [id])

  @@map("orders")
}

model PurchaseHistory {
  id              String       @id @default(cuid())
  createdAt       DateTime?    @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime?    @updatedAt
  deliveryAddress String?
  contactNumber   String?
  shippingType    ShippingType?
  total           Decimal      @default(0)
  transactionId   String       @unique @default(cuid())
  orderItems      Order[]
  transaction     Transaction?

  @@map("purchaseHistory")
}

model SchoolFee {
  id            String      @id @default(cuid())
  studentId     String      @default(cuid())
  transactionId String      @unique
  paymentType   PaymentType
  createdAt     DateTime?   @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime?   @updatedAt
  order         Int
  gradeLevel    GradeLevel  @default(PRESCHOOL)
  student       Workspace   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  transaction   Transaction @relation(fields: [transactionId], references: [transactionId])

  @@unique([studentId, transactionId])
  @@map("schoolFee")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model StudentRecord {
  id                   String        @id @default(cuid())
  studentId            String        @unique @default(cuid())
  firstName            String
  middleName           String
  lastName             String
  birthDate            DateTime
  gender               Gender
  religion             Religion
  incomingGradeLevel   GradeLevel
  enrollmentType       Enrollment    @default(NEW)
  program              Program       @default(HOMESCHOOL_PROGRAM)
  cottageType          CottageType?
  accreditation        Accreditation @default(LOCAL)
  schoolYear           String?
  reason               String?
  formerSchoolName     String
  formerSchoolAddress  String
  createdAt            DateTime?     @default(now())
  deletedAt            DateTime?
  updatedAt            DateTime?     @updatedAt
  image                String?
  liveBirthCertificate String?
  reportCard           String?
  discount             String?
  scholarship          String?
  primaryTeacherName   String?             
  primaryTeacherAge    String?            
  primaryTeacherRelationship String?      
  primaryTeacherEducation String?        
  primaryTeacherProfile  String ?
  studentStatus          String?        
  student              Workspace     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("studentRecord")
}

model Transaction {
  id                String            @id @default(cuid())
  transactionId     String            @unique
  referenceNumber   String            @unique
  userId            String
  amount            Decimal           @default(0)
  currency          Currency          @default(PHP)
  transactionStatus TransactionStatus @default(U)
  paymentStatus     TransactionStatus @default(U)
  description       String?
  message           String?
  url               String?
  createdAt         DateTime?         @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime?         @updatedAt
  purchaseHistoryId String?           @unique
  source            TransactionSource @default(STORE)
  paymentReference  String?
  fee               Fees              @default(ONLINE)
  purchaseHistory   PurchaseHistory?  @relation(fields: [purchaseHistoryId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  schoolFee         SchoolFee?
  payment           Decimal?
  balance           Decimal?           

  @@unique([transactionId, referenceNumber])
  @@map("transactions")
}

model User {
  id                  String               @id @default(cuid())
  userCode            String               @unique @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime?            @default(now())
  deletedAt           DateTime?
  updatedAt           DateTime?            @updatedAt
  userType            UserType?            @default(USER)
  inviteCode          String?
  accounts            Account[]
  customerPayment     CustomerPayment?
  domains             Domain[]
  guardianInformation GuardianInformation?
  membership          Member[]             @relation("membership")
  invitedMembers      Member[]             @relation("inviter")
  sessions            Session[]
  transaction         Transaction[]
  createdWorkspace    Workspace[]

  @@unique([userCode, email])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Workspace {
  id            String         @id @default(cuid())
  workspaceCode String         @unique @default(cuid())
  inviteCode    String         @unique @default(cuid())
  creatorId     String
  name          String
  slug          String
  createdAt     DateTime?      @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime?      @updatedAt
  creator       User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  domains       Domain[]
  members       Member[]
  schoolFees    SchoolFee[]
  studentRecord StudentRecord?

  @@unique([workspaceCode, inviteCode])
  @@map("workspaces")
}

enum Accreditation {
  LOCAL
  INTERNATIONAL
  DUAL
  FORM_ONE
  FORM_TWO
  FORM_THREE
}

enum Currency {
  CAD
  PHP
  USD
}

enum Enrollment {
  CONTINUING
  NEW
}

enum Fees {
  ONLINE
  OTC
  PAYMENT_CENTERS
}

enum Gender {
  FEMALE
  MALE
}

enum GradeLevel {
  PRESCHOOL
  K1
  K2
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
  GRADE_9
  GRADE_10
  GRADE_11
  GRADE_12
}

enum GuardianType {
  MOTHER
  FATHER
  LEGAL_GUARDIAN
}

enum CottageType {
  THREE_DAYS_A_WEEK
  FIVE_DAYS_A_WEEK
}

enum ShippingType {
  PICK_UP
  WITHIN_CEBU
  NCR
  NORTH_LUZON
  SOUTH_LUZON
  VISAYAS
  MINDANAO
  ISLANDER
}

enum InvitationStatus {
  ACCEPTED
  PENDING
  DECLINED
}

enum PaymentType {
  ANNUAL
  SEMI_ANNUAL
  QUARTERLY
  MONTHLY
}

enum Program {
  HOMESCHOOL_PROGRAM
  HOMESCHOOL_COTTAGE
}

enum Religion {
  ROMAN_CATHOLIC
  MUSLIM
  BORN_AGAIN_CHRISTIAN
  SEVENT_DAY_ADVENTIST
  IGLESIA_NI_CRISTO
  LATTER_DAY_SAINTS_MORMONS
  OTHERS
}

enum SubscriptionType {
  FREE
  STANDARD
  PREMIUM
}

enum TeamRole {
  MEMBER
  OWNER
}

enum TransactionSource {
  ENROLLMENT
  STORE
}

enum TransactionStatus {
  S
  F
  P
  U
  R
  K
  V
  A
}

enum UserType {
  ADMIN
  USER
}

enum studentStatus{
  ENROLLED
  PENDING
  DROPPED
}
